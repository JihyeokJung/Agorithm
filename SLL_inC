//

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
typedef struct Node {
	struct Node* next; //자기참고 구조체
	int data;
}Node;

void appendFirst(Node* list, int newData); //맨 앞에 추가
void append(Node* list, int newData); //맨 뒤에 추가
void insert(Node* list,int pos, int newData);
void showList(Node* list);

void deleteList(Node* list);
void deleteNode(Node* list, int pos);
void deleteLast(Node* list); 


int main() {
	int inputData,pos;
	Node* head;
	head = (Node*)malloc(sizeof(Node));
	head->data = 0;
	head->next = NULL;

	printf("맨 앞에 리스트 추가하기\n");

	for (int i = 0; i < 3; i++) { 
		printf("데이터 입력 : ");
		scanf("%d", &inputData);
		appendFirst(head, inputData);
	}
	showList(head);

	printf("맨 뒤에 리스트 추가하기\n");
	for (int i = 0; i < 3; i++) {
		printf("데이터 입력 : ");
		scanf("%d", &inputData);
		append(head, inputData);
	}
	showList(head);

	printf("특정 위치에 삽입하기\n");
	printf("데이터 삽일 할 위치, 데이터 : ");
	scanf("%d %d", &pos,&inputData);
	insert(head, pos, inputData);
	showList(head);

	printf("\n맨 뒤의 데이터 삭제하기\n");
	deleteLast(head);
	showList(head);

	printf("특정 위치 데이터 삭제하기\n");
	printf("삭제할 노드의 위치 : ");
	scanf("%d", &pos);
	deleteNode(head,pos);
	showList(head);
	return 0;
}

//--------------------------------------------------------------삽입-----------------------------------------------------------*/
//
void appendFirst(Node* list, int newData) {
	//list는 헤드노드 => 데이터 안가지고 있음.
	struct Node* nextNode = (Node*)malloc(sizeof(Node));
	nextNode->next = list->next;
	nextNode->data = newData;
	
	list->next = nextNode;
}

void append(Node* list, int newData) {

	Node* newNode = (Node*)malloc(sizeof(Node));
	newNode->next = NULL;
	newNode->data = newData;

	if (list->next == NULL) { //헤드노드 밖에 없다면
		// == appebdFirst

		list->next = newNode;
	}
	else {
		Node* cur = list;
		while (cur->next != NULL) {
			cur = cur->next; //제일 끝의 노드로 이동
		}

		cur->next = newNode;
	}
}
void insert(Node* list,int pos, int newData) { //특정 position에 삽입.
	Node* cur = list;

	Node* newNode = (Node*)malloc(sizeof(Node));
	newNode->data = newData;
	newNode->next = NULL;

	//위치가 0인 경우
	if (pos == 0) {  //헤드 뒤에 저장
		newNode->next = list->next;
		list->next = newNode;
	}
	else {
		int cnt = 0;

		while (cnt != pos) {
			if (cnt == pos - 1) {
				newNode->next = cur->next;
				cur->next = newNode;
			}
			cur = cur->next;
			cnt++;
		}
	}
}
//---------------------------------------------출력----------------------------------------
//
void showList(Node* list) {
	Node* cur = list->next;
	printf("[ ");
	while (cur != NULL) {//출력 ->next로 이동이므로 현재 Node가 NULL인지
		printf("%d ", cur->data);
		cur = cur->next;
	}
	printf("]\n");
}

//---------------------------------------------삭제---------------------------------------
//
void deleteList(Node* list) {
	//리스트 삭제
	Node* cur = list;
	Node* next; 
	while (cur != NULL) {
		next = cur->next;
		free(cur); 
		cur = next;
	}
}
void deleteNode(Node* list, int pos) {  //특정 위치 노드 제거
	Node* cur = list->next;
	Node* nextNode = NULL;
	Node* pre = list;
	int cnt = 0;

	while (cnt != pos) {
		if (cnt == pos - 1) {
			nextNode = cur->next;
			free(cur);
			pre->next = nextNode;  //pre는 cur과 같다.
		}
		pre = cur;
		cur = cur->next;
		cnt++;
	}
	
}
void deleteLast(Node* list) {  //마지막 노드 제거
	Node* cur = list;
	Node* pre = list;

	while (cur->next != NULL) {
		pre = cur;
		cur = cur->next;
	}
	pre->next = NULL;
	free(cur);
}
//
