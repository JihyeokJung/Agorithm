
package Class7;
import java.util.*;

class Variable{
    String variable;  // 변수 이름
    int value; //변수 값

    Variable(){}
    Variable(String variable, int value){
        this.variable = variable;
        this.value = value;
    }
}
class Order extends Variable{
    String order; //명령어 종류
    Order(){}
    Order(String order, String variable, int value){
        this.variable = variable;
        this.order= order;
        this.value = value;
    }
}
class Console extends Order{
    static HashMap<String,Integer> variables= new HashMap<String, Integer>();  //변수명으로 변수이름 찾기.
    public static void compile(HashMap orders) {
        //orders는 명령어의 행 번호와 명령어 종류
        //variables는 heap영역 -> 사용핣 변수와 변수값 저장
        Scanner scan = new Scanner(System.in);

        int col=0;  //명령어의 줄
        String order,variable,value;
        Order temp;

        while(true){
            System.out.print(col+" >> ");
            order = scan.next();
            if(order.equals("go") || order.equals("GO"))
                break;
            variable = scan.next();
            value = scan.next();

            int n;
            if(value.charAt(0)>='0' && value.charAt(0)<='9') {
                n = Integer.parseInt(value);  //숫자면
                variables.put(variable,n);
                temp = new Order(order, variable, n);
                orders.put(col, temp);
                col++;
            }else {
                n = variables.get(value);
                temp = new Order(order, variable, n);
                orders.put(col, temp);  //명령어 줄(->key), 명령어 종류(order), 변수 이름(variable), 변수 값(value) 저장
                col++;
            }
        }
    }
}

public class SuperCumSoftware {

    public static void main(String[] args) {
        HashMap<Integer, Order> orders;  //몇번째 명령어 인지(행) , 명령어의 내용이 무엇인지
        HashMap<String,Integer> values = new HashMap<String,Integer>();
        System.out.println("슈퍼컴이 작동합니다. 프로그램을 입력해주세요. GO를 입력하면 종료합니다.");

        while (true){
            orders = new HashMap<Integer, Order>();
            Console.compile(orders);  //명령어 입력
            int cnt = 0;
            while(cnt < orders.size()) {
                String temp_variable;
                int temp_val;
                Order value = orders.get(cnt);
                switch (value.order){
                    case "mov":
                        if(!values.containsKey(value.variable))
                            values.put(value.variable,value.value);
                        else {
                            temp_variable = value.variable;
                            values.remove(value.variable);
                            values.put(temp_variable,value.value);
                        }
                        cnt++;
                        break;
                    case "add":
                        temp_variable = value.variable;
                        temp_val = values.get(value.variable); //원래 값
                        values.remove(value.variable);
                        values.put(temp_variable,temp_val+value.value);
                        cnt++;
                        break;
                    case "sub":
                        temp_variable = value.variable;
                        temp_val = values.get(value.variable);
                        values.remove(value.variable);
                        values.put(temp_variable,temp_val-value.value);
                        cnt++;
                        break;
                    case "jn0":
                        if(values.get(value.variable) !=0 )
                            cnt = value.value;
                        else
                            cnt++;
                        break;
                    case "ptr":
                        System.out.println(value.variable +"→ "+values.get(value.variable));
                        cnt++;
                        break;
                }

            }
        }

    }
}
